name: Release model-training

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  build-and-release-model:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-tag.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract-tag
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/v}
          echo "version=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$TAG_NAME" >> $GITHUB_ENV
          echo "$TAG_NAME" > version.txt

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Initialize DVC if needed
        run: |
          if [ ! -d ".dvc" ]; then
            dvc init
          fi

      - name: Set up local DVC remote
        run: |
          mkdir -p ~/remotedvc
          dvc remote add -f -d mylocalremote ~/remotedvc
          dvc remote default mylocalremote

      - name: Reproduce pipeline (train model)
        run: dvc repro

      - name: Upload trained model to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.version }}
          generate_release_notes: true
          files: |
            models/Classifier_Sentiment_Model.joblib
            models/c1_BoW_Sentiment_Model.pkl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  bump-pre-release:
    needs: build-and-release-model
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Compute next pre-release version
        id: compute-pre-release
        run: |
          CURRENT_VERSION=$(cat version.txt)
          echo "Current version.txt: $CURRENT_VERSION"

          MAJOR=$(echo "$CURRENT_VERSION" | cut -d . -f 1)
          MINOR=$(echo "$CURRENT_VERSION" | cut -d . -f 2)
          PATCH=$(echo "$CURRENT_VERSION" | cut -d . -f 3)
          NEXT_PATCH=$((PATCH + 1))

          TIMESTAMP=$(date -u +"%Y%m%d.%H%M")
          NEXT_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}-pre.${TIMESTAMP}"
          echo "Computed next pre-release version: $NEXT_VERSION"

          echo "$NEXT_VERSION" > version.txt
          git add version.txt
          echo "next_version=$NEXT_VERSION" >> $GITHUB_ENV
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push pre-release version to main
        run: |
          git commit -m "Bump version to ${{ steps.compute-pre-release.outputs.next_version }} after release ${{ needs.build-and-release-model.outputs.version }}" || echo "Nothing to commit"
          git push origin main
